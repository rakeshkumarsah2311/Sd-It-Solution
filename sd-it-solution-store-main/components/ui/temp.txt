
type ButtonType = "a" | "button"

type BaseProps = PropsWithChildren<{
  as : ButtonType
}>

type ButtonProps <T extends ButtonType> = {
  as : T,
} & ComponentPropsWithoutRef<T>



const Button = <T extends ButtonType>({ 
  as,
  ...props
} : ButtonProps<T>) => {
  if (as === "a") {
    return (
      <a {...props as ComponentPropsWithoutRef<T> }>{props.children}</a>
    )
  }

  return <button {...props }>{props.children}</button>
}



//// ---------------WORKING------------


type ButtonProps = PropsWithChildren<{
  as : "a"
} & AnchorHTMLAttributes<HTMLAnchorElement> | {
  as : "button"
} & ButtonHTMLAttributes<HTMLButtonElement>>


const Button = ({ as, children, ...props } : ButtonProps) => {

  if (as === 'a') {

    const rest = props

    return <a {...rest} >{children}</a>
  }
  const rest = props

  return <button {...rest} >{children}</button> 





  ## 2nd version that works in Dev but fails in Prod

  import Link from "next/link"
import { ComponentPropsWithoutRef, PropsWithChildren } from "react"

type ButtonType = "a" | "button"

type Variants = "primary" | "secondary"

type ButtonProps <T extends ButtonType> = PropsWithChildren<{
  as : T,
  className : string,
  variant : Variants
} & ComponentPropsWithoutRef<T>>

type BtnStyle = {
  [ key in Variants] : string
}

const btnStyles : BtnStyle = {
  primary : "btn-primary",
  secondary : "btn-secondary"
}

const Button = <T extends ButtonType>({ 
  as,
  className,
  variant,
  children,
  ...props
} : ButtonProps<T>) => {
  const style = btnStyles[variant]
  
  if (as === "a") {
    return (
      <a className={`${style} ${className}`} {...props }>{children}</a>
    )
  }

  return <button className={`${style} ${className}`} {...props }>{children}</button>
}

export default Button